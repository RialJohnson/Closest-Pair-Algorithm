import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

// class that holds the divide-and-conquer algorithm and required functions to complete it
public class ClosestPair {

	// instance variables
	public static Point[] points;
	public static float[] values;
	private static int globalNumPoints = 0;

	// constructor
	public ClosestPair() {

		// reads in input from text files
		readIn();

		// initializes a list to store our points, soon to be sorted
		List<Point> points = new ArrayList<Point>();

		// the print statements below are to view what points are being added
		for (int i = 0; i < values.length; i = i + 2) {

			points.add(new Point(values[i], values[i + 1]));

		}

		// starts the recursive divide and conquer process
		Pair finalAnswer = sortLists(points);

		// prints out final solution to the problem plus formatting
		System.out.println("\n****************************************************************");
		System.out.println("Final Result (Closest pair): ");
		System.out.println("		" + finalAnswer.print());
		System.out.println("****************************************************************");

	}

	// reads in points from text file
	public static void readIn() {

		int countValues = 0;

		Scanner scanner;

		try {
			scanner = new Scanner(new File("input.txt"));

			scanner.useLocale(Locale.US);

			String input = "";

			while (scanner.hasNext()) {

				input = input + " " + scanner.next();

			}

			input = input.replaceAll(",", " ");

			Scanner scanner2 = new Scanner(input);

			int j = 0;

			while (scanner2.hasNextFloat()) {

				scanner2.nextFloat();
				countValues++;

			}

			Scanner scanner3 = new Scanner(input);

			values = new float[countValues];

			while (scanner3.hasNextFloat()) {

				values[j] = scanner3.nextFloat();
				j++;

			}

			// sets size for Point array
			points = new Point[countValues / 2];

			// creates points and adds them to an array
			int k = 0;

			for (int i = 0; i < countValues; i = i + 2) {
				points[k] = new Point(values[i], values[i + 1]);
				// the print below states what is being entered in from the text
				// file
				k++;
				globalNumPoints++;
			}

		} catch (FileNotFoundException exception) {

			System.out.print("File not found!");
		}

	}

	// calculates distance between two points
	public static double getDistance(Point p1, Point p2) {
		// in order to calculate distances we need both the distances of x and y
		// of each coordinate
		double xdist = p2.x - p1.x;
		double ydist = p2.y - p1.y;

		// need hypotenuse to find the full distance
		double hypDistance = Math.hypot(xdist, ydist);

		// rounds to two decimals
		double scale = Math.pow(10, 1);

		double answer = Math.round(hypDistance * scale) / scale;

		return answer;
	}

	// a method to sort x values in the list
	public static void sortX(List<Point> points) {

		// built in java functions to sort our points by X
		Collections.sort(points, new Comparator<Point>() {
			public int compare(Point point1, Point point2) {
				if (point1.x < point2.x)
					return -1;
				if (point1.x > point2.x)
					return 1;
				return 0;
			}
		});
	}

	// a method to sort y values in the list
	public static void sortY(List<Point> points) {

		// built in java functions to sort our points by X
		Collections.sort(points, new Comparator<Point>() {
			public int compare(Point point1, Point point2) {
				if (point1.y < point2.y)
					return -1;
				if (point1.y > point2.y)
					return 1;
				return 0;
			}
		});
	}

	// puts lists into array lists and then sorts them
	public static Pair sortLists(List<Point> points) {

		// puts x and y lists into array lists
		List<Point> pointsSortedByX = new ArrayList<Point>(points);
		sortX(pointsSortedByX);
		List<Point> pointsSortedByY = new ArrayList<Point>(points);
		sortY(pointsSortedByY);



		// calls the initial algorithm to find closest pair of points
		return algorithm(pointsSortedByX, pointsSortedByY, 0, globalNumPoints);
	}

	// used when we have 3 or fewer pairs
	// this is the simplest case, so brute force doesn't contribute to time
	// complexity
	public static Pair bruteForce(List<Point> points, int leftIndex, int rightIndex, int dividingIndex) {

		// finds number of points in list
		int numPoints = points.size();

		// checks to ensure there are two points to compare
		if (numPoints < 2) {

			System.out.println("Found result: INF");

			return null;
		}

		//
		Pair pair = new Pair(points.get(0), points.get(1));

		System.out.println("Solving Problem: Point[" + leftIndex + "] through Point[" + (leftIndex + 1) + "]");

		System.out.println("	Found Result: " + pair.print() + '\n');

		// points and distance for printing later
		Point p1 = points.get(0);
		Point p2 = points.get(1);
		double d = getDistance(points.get(0), points.get(1));

		// executes when there are enough points to compare ( can't compare one
		// pair, no reason to compare 2)
		if (numPoints > 2) {

			// loops through these three pairs, comparing each
			for (int i = 0; i < numPoints - 1; i++) {

				Point point1 = points.get(i);
				for (int j = i + 1; j < numPoints; j++) {

					Point point2 = points.get(j);

					// calls method to get the distance between a pair of points
					double distance = getDistance(point1, point2);

					// combines the two problems, checks for shortest distance
					// between
					if (distance < pair.distance) {
						pair.update(point1, point2, distance);

						// variables for printing
						p1 = point1;
						p2 = point2;
						d = distance;

					}
				}
			}

			System.out.println("Combining Problems: Point[" + leftIndex + "] through Point[" + (leftIndex + 1) + "]"
					+ " and Point[" + rightIndex + "] through Point[" + rightIndex + "]");
			System.out.println("	Found result: P1: " + p1 + ", P2: " + p2 + ", Distance: " + d + '\n');
		}

		// returns the pair with the shortest distance found (if only two points
		// passed, returns those)
		return pair;
	}

	// divide and conquer algorithm to solve closest pair problem
	// runs in nlog(n) time
	// once it finds three pairs of points, it uses a brute force method to find
	// the shortest distance of those points
	// only has to check seven (constant) closest points when combining the
	// problem
	private static Pair algorithm(List<Point> pointsSortedByX, List<Point> pointsSortedByY, int start, int end) {

		// int numPoints = pointsSortedByX.size();
		int numPoints = end - start;
		int rightIndex = end - 1;
		int leftIndex = start;
		int dividingIndex = (start + rightIndex) / 2;

		// takes care of the case that 2/2 = 1
		if (dividingIndex == 0) {
			dividingIndex = 1;
		}

		// the base case is three pairs of points, when the brute force
		// algorithm must be used
		if (numPoints <= 3) {
			System.out.println("Solving Problem: Point[" + leftIndex + "] through Point[" + rightIndex + "]");
			System.out.println("	Dividing at Point [" + dividingIndex + "]\n");
			return bruteForce(pointsSortedByX, leftIndex, rightIndex, dividingIndex);
		}

		System.out.println("Solving Problem: Point[" + leftIndex + "] through Point[" + rightIndex + "]");

		System.out.println("	Dividing at Point [" + dividingIndex + "]\n");

		// STARTS WITH LEFT HALF OF LIST

		// divides current list into left and right sub arrays based off of the
		// parent list's center
		List<Point> leftList = pointsSortedByX.subList(0, numPoints / 2);
		List<Point> rightList = pointsSortedByX.subList(numPoints / 2, numPoints);

		// creates temporary list to store the sub list into for both the left
		// and right side
		List<Point> sortedHalfList = new ArrayList<Point>(leftList);

		sortY(sortedHalfList); // sorts those pairs by y value

		// the recursive call in the algorithm to divide into smaller problem
		// calls with left values, x and y
		Pair closestPair = algorithm(leftList, sortedHalfList, start, dividingIndex + 1);

		// NOW TAKES CARE OF RIGHT HALF OF THE LIST

		sortedHalfList.clear(); // prevents overlap in temporary list

		sortedHalfList.addAll(rightList); // adds second half of pairs

		sortY(sortedHalfList); // sorts those pairs by y value

		Pair closestPairRight = algorithm(rightList, sortedHalfList, dividingIndex + 1, end);

		// finds and sets a new closest pair
		if (closestPairRight.distance < closestPair.distance) {
			closestPair = closestPairRight;
		}

		sortedHalfList.clear(); // prevents overlap in temporary list

		// create a variable to store the shortest distance of our pairs
		double shortestDistance = closestPair.distance;

		// finds the first point in the right sub-list
		double xMid = rightList.get(0).x;

		
		// prevents the final solution combination from being printed too many times
		if (end == globalNumPoints) {

		} else {
			System.out.println("Combining Problems: Point[" + start + "] through Point[" + dividingIndex + "]"
					+ " and Point[" + (dividingIndex + 1) + "] through Point[" + (end - 1) + "]");

			System.out.println("	Found Result: " + closestPair.print() + '\n');
		}

		// checks the points between halves
		for (Point point : pointsSortedByY) {

			double distanceBetweenHalves = Math.abs(xMid - point.x);

			// checks between sub-problems, and checks if the point is less than
			// the shortest distance
			// in either half
			if (distanceBetweenHalves < shortestDistance) {
				sortedHalfList.add(point);

			}
		}

		for (int i = 0; i < sortedHalfList.size() - 1; i++) {

			Point point1 = sortedHalfList.get(i); // first point at index i

			for (int j = i + 1; j < sortedHalfList.size(); j++) {

				Point point2 = sortedHalfList.get(j); // second point to the right of
												// first

				if ((point2.y - point1.y) >= shortestDistance) {

					break;
				}

				double distance = getDistance(point1, point2);

				if (distance < closestPair.distance) {
					closestPair.update(point1, point2, distance);
					shortestDistance = distance; // updates the final shortest
													// distance

					// prints out the final combination
					System.out.println("Combining Problems: Point[" + start + "] through Point[" + dividingIndex + "]"
							+ " and Point[" + (dividingIndex + 1) + "] through Point[" + (end - 1) + "]");

					System.out.println("	Found Result: " + closestPair.print() + '\n');

				}
			}
		}

		return closestPair; // this is the final answer
	}

}
